apply plugin: 'com.android.application'
apply plugin: 'findbugs'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'

    defaultConfig {
        applicationId "de.hdm.dp.bd.chronophage"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        // set to true to turn off analysis progress
        // reporting by lint
        quiet false
        // if true, also release builds will be analysed
        checkReleaseBuilds true
        // if true, stop the gradle build if errors are found
        abortOnError false
        // if true, only report errors
        ignoreWarnings false
        // if true, generate an XML report, e.g., for use by Jenkins
        xmlReport true
        lintConfig file("$project.rootDir/config/linter.xml")
        xmlOutput file("$project.buildDir/reports/lint/lint-results.xml")
    }
}


repositories {
    //In diesem Repository ist die Library für das Kuchendiagramm zu finden
    maven { url "https://jitpack.io" }
}

dependencies {
    compile 'com.android.support:appcompat-v7:26.0.0'
    compile 'com.android.support:design:26.0.0'

    //Hier wird angegeben, dass diese Library mit compiliert werden muss (Kuchendiagramm)
    compile 'com.github.PhilJay:MPAndroidChart:v2.1.6'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'

    compileOnly 'com.google.code.findbugs:annotations:3.0.1'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.1'

    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    // Android JUnit Runner
    androidTestCompile 'com.android.support.test:runner:0.5'
    // JUnit4 Rules
    androidTestCompile 'com.android.support.test:rules:0.5'
    // UI Automator
    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'

    androidTestCompile ('com.android.support.test.espresso:espresso-contrib:2.2.1') {
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
        exclude module: 'support-v13'
        exclude module: 'recyclerview-v7'
    }
}

//Konfiguration von Checkstyle, insbesondere Referenz des eigenen Checkstyle-Filestask
task checkstyle(type: Checkstyle) {
    //wo liegt das checkstyle-Konfigurationsfile (das sollte auch das
    //Konfigurationsfile sein, das in AdnroidStudio benutzt wird)
    configFile file("${project.rootDir}/checkstyle.xml")
    //optional, wo liegt das File, in dem zu unterdrückende Warnungen stehen
    configProperties.checkstyleSuppressionsPath = file("${project.rootDir}/config/checkstyle_suppressions.xml").absolutePath
    source 'src'
    include '**/*.java' // bei der Analyse durch Checkstyle berücksichtigen
    exclude '**/gen/**' // bei der Analyse durch Checkstyle nicht berücksichtigen

    //Angabe, welche Report-Formate benutzt und wo sie gespeichert werden
    reports {
        xml.enabled = true
        html.enabled = true
        xml {
            destination file("$project.buildDir/reports/checkstyle/checkstyle-results.xml")
        }
        html {
            destination file("$project.buildDir/reports/checkstyle/checkstyle-results.html")
        }
    }
    classpath = files()
}

task customFindbugs(type: FindBugs) {
    ignoreFailures = true
    effort = "max"
    reportLevel = "low"
    //FindBugs soll keine Testklassen einbeziehen, daher nur Debug
    classes = files("$project.buildDir/intermediates/classes/debug")
    //Dieses File wird normalerweise in Android Studio automatisch
    //angelegt und enthält alle Files, die nicht durch FindBugs
    //analysiert werden sollen
    excludeFilter = file("${project.rootDir}/config/findbugs-android-exclude.xml")
    source = fileTree('src/main/java/')
    classpath = files()
    reports {
        xml.enabled = true
        xml.withMessages = true
        //FindBugs kann immer nur einen Report erzeugen,
        // entweder xml oder html
        html.enabled = !xml.enabled
        xml.destination file("$project.buildDir/reports/findbugs/findbugs-results.xml")
        html.destination file ("$project.buildDir/reports/findbugs/findbugsresults.html")
    }
    // FindBugs benutzt kompilierte Files für die Analyse!
    dependsOn "compileReleaseJavaWithJavac"
}

/**
 * notwendiger Workaround für die Benutzung von Checkstyle
 * Details: http://stackoverflow.com/questions/28749804/how-to-compile-project-with-
 google-checkstyle-rules-with-gradle */

configurations {
    checkstyleOverride
}
dependencies {
    checkstyleOverride('com.puppycrawl.tools:checkstyle:7.6.1')
}
tasks.withType(Checkstyle) {
    checkstyleClasspath = project.configurations.checkstyleOverride
}

/**
 * Ende des notwendigen Workarounds für die Benutzung von Checkstyle
 */

apply plugin: 'jacoco'
jacoco {
    // Use this version for upper ones are broken (with Gradle)
    // https://github.com/jacoco/jacoco/issues/288
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$buildDir/reports/jacoco")
}
// Einstellung, welche Dateien der Testüberdeckungsanalyse
// unterzogen werden. Hier: alle Sourcedateien, also auch die
// Testsourcen
def coverageSourceDirs = [
        '../app/src'
]
task jacocoTestReport(type: JacocoReport, dependsOn: "test") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"
    classDirectories = fileTree(
            dir: '../app/build/intermediates/classes',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig*',
                       '**/Manifest*.*']
    )
    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('../app/build/jacoco/testUnitTestDebug.exec')
    reports {
        xml.enabled = true
        html.enabled = true
    }
}